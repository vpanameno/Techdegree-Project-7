{"ast":null,"code":"var _jsxFileName = \"/Users/vpanameno/Documents/GitHub/Techdegree-Project-7/gallery_app/src/components/PhotoContainer.js\";\nimport React, { Component } from 'react';\nimport Photo from './Photo';\nimport NotFound from './NotFound';\nimport { withRouter } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PhotoContainer extends Component {\n  componentDidUpdate() {\n    let path = this.props.history.location.pathname;\n    let query = this.props.title;\n\n    if (path.includes(\"/search/\")) {\n      path = path.replace('/search/', '');\n\n      if (path !== query) {\n        this.props.search(path);\n      }\n    }\n  }\n\n  render() {\n    let photos; //Function below determines if the user has inputted a result: if it's empty it will render the notFound component otherwise it will pass URL\n\n    if (this.props.length > 0) {\n      photos = results.map(photo => /*#__PURE__*/_jsxDEV(Photo, {\n        url: `https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`\n      }, photo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this));\n    } else {\n      photos = /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: photos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(PhotoContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/vpanameno/Documents/GitHub/Techdegree-Project-7/gallery_app/src/components/PhotoContainer.js"],"names":["React","Component","Photo","NotFound","withRouter","PhotoContainer","componentDidUpdate","path","props","history","location","pathname","query","title","includes","replace","search","render","photos","length","results","map","photo","server","id","secret"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,MAAMC,cAAN,SAA6BJ,SAA7B,CAAuC;AAErCK,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,IAAI,GAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,QAAnB,CAA4BC,QAAvC;AACA,QAAIC,KAAK,GAAG,KAAKJ,KAAL,CAAWK,KAAvB;;AACA,QAAGN,IAAI,CAACO,QAAL,CAAc,UAAd,CAAH,EAA8B;AAC1BP,MAAAA,IAAI,GAAGA,IAAI,CAACQ,OAAL,CAAa,UAAb,EAAyB,EAAzB,CAAP;;AACA,UAAGR,IAAI,KAAKK,KAAZ,EAAmB;AACf,aAAKJ,KAAL,CAAWQ,MAAX,CAAkBT,IAAlB;AACH;AACJ;AAEJ;;AACCU,EAAAA,MAAM,GAAG;AACP,QAAIC,MAAJ,CADO,CAGT;;AACE,QAAI,KAAKV,KAAL,CAAWW,MAAX,GAAoB,CAAxB,EAA2B;AACzBD,MAAAA,MAAM,GAAGE,OAAO,CAACC,GAAR,CAAYC,KAAK,iBACxB,QAAC,KAAD;AAAO,QAAA,GAAG,EAAG,iCAAgCA,KAAK,CAACC,MAAO,IAAGD,KAAK,CAACE,EAAG,IAAGF,KAAK,CAACG,MAAO;AAAtF,SAAkGH,KAAK,CAACE,EAAxG;AAAA;AAAA;AAAA;AAAA,cADO,CAAT;AAEG,KAHL,MAGW;AACLN,MAAAA,MAAM,gBAAG,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAAT;AACD;;AAEP,wBACI;AAAA,8BACE;AAAA,kBAAK,KAAKV,KAAL,CAAWK;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBACGK;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQC;;AAhCoC;;AAmCvC,oBAAed,UAAU,CAACC,cAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport Photo from './Photo';\nimport NotFound from './NotFound'\nimport { withRouter } from 'react-router-dom'\n\nclass PhotoContainer extends Component {\n\n  componentDidUpdate() {\n    let path = this.props.history.location.pathname;\n    let query = this.props.title;\n    if(path.includes(\"/search/\")) {\n        path = path.replace('/search/', '')\n        if(path !== query) {\n            this.props.search(path)\n        }\n    }\n\n}\n  render() {\n    let photos;\n\n  //Function below determines if the user has inputted a result: if it's empty it will render the notFound component otherwise it will pass URL\n    if (this.props.length > 0) {\n      photos = results.map(photo =>\n        <Photo url={`https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`} key={photo.id} />);\n        } else {\n          photos = <NotFound />\n        }\n\n  return (\n      <div>\n        <h2>{this.props.title}</h2>\n        <ul>\n          {photos}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(PhotoContainer);\n"]},"metadata":{},"sourceType":"module"}